diff --git a/goshine.go b/goshine.go
index b1269f4..33891ec 100644
--- a/goshine.go
+++ b/goshine.go
@@ -71,19 +71,6 @@ func NewGoshine(host string, port int, username string, password string, databas
 
 func (s *Goshine) GetStatus() GS_STATUS {
 	return s.status
-    Name    string
-    Type    string
-    Comment string
-}
-
-type GsResultSet struct {
-    Data    [][]string
-    Schema  []GsFieldInfo
-}
-
-
-func NewGoshine(host string, port int, username string, password string) *Goshine {
-	return &Goshine{host: host, port: port, username: username, password: password, status: GS_STATUS_DISCONNECTED}
 }
 
 func (s *Goshine) Connect() error {
@@ -128,10 +115,12 @@ func (s *Goshine) Connect() error {
 
 func (s *Goshine) reConnect() error {
 	for i := 0; i < 3; i++ {
+		fmt.Printf("try to reconnect: %d\n", i)
 		err := s.Connect()
 		if err == nil {
 			return nil
 		}
+		fmt.Println(err)
 		time.Sleep(10 * time.Second)
 	}
 	s.status = GS_STATUS_ERROR
@@ -229,13 +218,22 @@ func (s *Goshine) getValueStr(colval *TColumnValue) string {
 	}
 
 	if colval.IsSetStringVal() {
-		return *colval.GetStringVal().Value
+		if colval.GetStringVal().Value == nil {
+			return ""
+		} else {
+			return *colval.GetStringVal().Value
+		}
 	}
 
 	return ""
 }
 
 func (s *Goshine) FetchAll(sql string) (*GsResultSet, error) {
+
+	if s.status != GS_STATUS_CONNECTED {
+		return nil, errors.New("not connected")
+	}
+
 	if err := s.Execute(sql); err != nil {
 		return nil, err
 	}
@@ -261,9 +259,10 @@ func (s *Goshine) FetchAll(sql string) (*GsResultSet, error) {
 		results = append(results, row)
 	}
 
-    meta, err := s.getResultSetMetadata()
+	meta, err := s.getResultSetMetadata()
+
+	resultSet := &GsResultSet{Data: results, Schema: meta}
 
-    resultSet := &GsResultSet{Data: results, Schema: meta}
 	return resultSet, nil
 }
 
